# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4]   Результат: [3, 5, 2]
from random import randint
# ###
# ### Генерируем список случайных чисел, случайной длины
# ###
while True:
    random_list = [randint(-100, 100) for i in range(randint(0, 50))]
    l = len(random_list)
    if l != 0:
        print(f'Список случайных целых чисел: {random_list}', '\n')
        break
    else:
        print('Генератор создал пустой список. Пробуем еще раз')
new_list = []
flag = False
for each in random_list:
    if each > 0 and (each ** 0.5 - int(each ** 0.5) == 0):
        flag = True
        new_list.append(int(each ** 0.5))
if flag:
    print(f'Новый список с соблюдением всех условий задачи: {new_list}')
else:
    print('В исходном списке нет чисел, удовлетворяющих условиям задачи')


# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)
my_date = input('Введите дату в формате DD.MM.YYYY: ')
day = {'01': 'первое', '02': 'второе', '03': 'третье', '04': 'четвертое', '05': 'пятое',
       '06': 'шестое', '07': 'седьмое', '08': 'восьмое', '09': 'девятое', '10': 'десятое',
       '11': 'одинадцатое', '12': 'двинадцатое', '13': 'тринадцатое', '14': 'четырнадцатое',
       '15': 'пятнадцатое', '16': 'шестнадцатое', '17': 'семнадцатое', '18': 'восемнадцатое',
       '19': 'девятнадцатое', '20': 'двадцатое', '21': 'двадцать первое', '22': 'двадцать второе',
       '23': 'двадцать третье', '24': 'двадцать четвертое', '25': 'двадцать пятое', '26': 'двадцать шестое',
       '27': 'двадцать седьмое', '28': 'двадцать восьмое', '29': 'двадцать девятое', '30': 'тридцатое', 
       '31': 'тридцать первое'}
month = {'01': 'января', '02': 'февраля', '03': 'марта', '04': 'апреля', '05': 'мая', '06': 'июня',
         '07': 'июля', '08': 'августа', '09': 'сентября', '10': 'октября', '11': 'ноября', '12': 'декабря'}
my_day = my_date[:2]
my_month = my_date[3:5]
my_year = my_date[-4:]
print()
print(f'{my_date} = {day[my_day]} {month[my_month]} {my_year} года')


# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random
from random import randint
# ###
# ### Генерируем список случайных чисел в диапазоне от -100 до 100, длины n
# ###
n = int(input('Введите длину списка n: '))
while True:
    random_list = [randint(-100, 100) for i in range(n)]
    if len(random_list) != 0:
        print(f'Список случайных целых чисел: {random_list}', '\n')
        break
    else:
        print('Генератор создал пустой список. Пробуем еще раз')


# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут: 
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]
from random import randint
# ###
# ### Генерируем список случайных чисел
# ###
while True:
    random_list = [randint(0, 100) for i in range(randint(0, 30))]
    if len(random_list) != 0:
        print(f'Исходный список случайных целых чисел: {random_list}', '\n')
        break
    else:
        print('Генератор создал пустой список. Пробуем еще раз')
new_list1 = []
new_list2 = []
for each in random_list:
    if each not in new_list1:
        new_list1.append(each)
    if random_list.count(each) == 1:
        new_list2.append(each)
print('Неповторяющиеся элементы исходного списка:')
print(new_list1)
print('Элементы исходного списка, которые не имеют повторений:')
print(new_list2)
